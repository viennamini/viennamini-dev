PROJECT(ViennaMini)

include(ExternalProject)
include(FindPackageHandleStandardArgs)

# CMake 2.8.2 is required as a minimum due to the 
# ExternalProject_Add mechanism supporting GIT repositories
cmake_minimum_required(VERSION 2.8.2)

#if you don't want the full compiler output, remove the following line
#SET(CMAKE_VERBOSE_MAKEFILE ON)

SET(VIENNASTAR "Local" CACHE STRING "Use local ViennaStar libraries or download them automatically, supported values are: Local,Download")
SET(PARALLEL_MODE "Serial" CACHE STRING "Specify execution mode for linear algebra kernels, supported values are: Serial,OpenCL,OpenMP")
option(BUILD_EXAMPLES "Build the examples" ON)


list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

#set default build type 
IF (NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "Release")
ENDIF()

#set compiler flags
SET(CMAKE_CXX_FLAGS "-Wall -pedantic")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O3 -g ")
SET(CMAKE_CXX_FLAGS_RELEASE "-O3 ")
SET(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g -DVIENNAMINI_DEBUG")

STRING(TOLOWER "${PARALLEL_MODE}" PARALLEL_MODE) # make case unique
IF(PARALLEL_MODE STREQUAL "serial")
  MESSAGE(STATUS "Using serial linear algebra execution mode")
ELSEIF(PARALLEL_MODE STREQUAL "opencl")
  MESSAGE(STATUS "Using OpenCL linear algebra execution mode")
  FIND_PACKAGE(OpenCL REQUIRED)
  IF(OPENCL_FOUND)
    INCLUDE_DIRECTORIES(${OPENCL_INCLUDE_DIRS})
    SET(LIBRARIES ${LIBRARIES} ${OPENCL_LIBRARIES})
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -DVIENNACL_WITH_OPENCL")
  ENDIF(OPENCL_FOUND)  
ELSEIF(PARALLEL_MODE STREQUAL "openmp")
  MESSAGE(STATUS "Using OpenMP linear algebra execution mode")
  FIND_PACKAGE(OpenMP REQUIRED)
  IF(OPENMP_FOUND)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS} -DVIENNACL_WITH_OPENMP")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -DVIENNACL_WITH_OPENMP")
  ENDIF(OPENMP_FOUND)  
ENDIF()

INCLUDE_DIRECTORIES(".")
STRING(TOLOWER "${VIENNASTAR}" VIENNASTAR) 
IF(VIENNASTAR STREQUAL "local")
  MESSAGE(STATUS "Using local ViennaStar ..")

  FIND_PACKAGE(ViennaFVM REQUIRED)
  IF(VIENNAFVM_FOUND)
    INCLUDE_DIRECTORIES(${VIENNAFVM_INCLUDE_DIRS})
  ENDIF(VIENNAFVM_FOUND)

  FIND_PACKAGE(ViennaGrid REQUIRED)
  IF(VIENNAGRID_FOUND)
    INCLUDE_DIRECTORIES(${VIENNAGRID_INCLUDE_DIRS})
  ENDIF(VIENNAGRID_FOUND)

  FIND_PACKAGE(ViennaMath REQUIRED)
  IF(VIENNAMATH_FOUND)
    INCLUDE_DIRECTORIES(${VIENNAMATH_INCLUDE_DIRS})
  ENDIF(VIENNAMATH_FOUND)
  
  FIND_PACKAGE(ViennaCL REQUIRED)
  IF(VIENNACL_FOUND)
    INCLUDE_DIRECTORIES(${VIENNACL_INCLUDE_DIRS})
  ENDIF(VIENNACL_FOUND)

  FIND_PACKAGE(ViennaData REQUIRED)
  IF(VIENNADATA_FOUND)
    INCLUDE_DIRECTORIES(${VIENNADATA_INCLUDE_DIRS})
  ENDIF(VIENNADATA_FOUND)

  FIND_PACKAGE(ViennaMaterials REQUIRED)
  IF(VIENNAMATERIALS_FOUND)
    INCLUDE_DIRECTORIES(${VIENNAMATERIALS_INCLUDE_DIRS})
    SET(LIBRARIES ${LIBRARIES} ${VIENNAMATERIALS_LIBRARIES})
  ENDIF(VIENNAMATERIALS_FOUND)

  FIND_PACKAGE(ViennaMesh REQUIRED)
  IF(VIENNAMESH_FOUND)
    INCLUDE_DIRECTORIES(${VIENNAMESH_INCLUDE_DIRS})
  ENDIF(VIENNAMESH_FOUND)

  FIND_PACKAGE(ViennaDeviceCollection REQUIRED)
  IF(VIENNADEVICECOLLECTION_FOUND)
    CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/viennamini/device_collection.hpp.in
                   ${CMAKE_BINARY_DIR}/viennamini/device_collection.hpp)
    INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})
  ENDIF(VIENNADEVICECOLLECTION_FOUND)

ELSEIF(VIENNASTAR STREQUAL "download")
  MESSAGE(STATUS "Downloading ViennaStar libraries ..")
  FIND_PACKAGE(Git REQUIRED)
  IF(GIT_FOUND)
    INCLUDE(cmake/GetViennaGrid.cmake)
    INCLUDE(cmake/GetViennaMath.cmake)
    INCLUDE(cmake/GetViennaCL.cmake)
    INCLUDE(cmake/GetViennaData.cmake)
    INCLUDE(cmake/GetViennaMaterials.cmake)
    INCLUDE(cmake/GetViennaMesh.cmake)
  ENDIF(GIT_FOUND)
ENDIF()


# build the ViennaMini library
AUX_SOURCE_DIRECTORY(src/ LIBSOURCES) 
ADD_LIBRARY(viennamini SHARED ${LIBSOURCES})
ADD_DEPENDENCIES(viennamini viennamaterials)
TARGET_LINK_LIBRARIES(viennamini ${LIBRARIES})
SET(LIBRARIES ${LIBRARIES} viennamini)

IF(BUILD_EXAMPLES)
  ADD_SUBDIRECTORY(examples)
ENDIF(BUILD_EXAMPLES)

##Compatibility with Qt-Creator
file( GLOB_RECURSE QtCreatorCompatibility_SRC
    viennamini/*.hpp viennamini/*.h)
add_custom_target( QtCreatorCompatibility SOURCES ${QtCreatorCompatibility_SRC} )



