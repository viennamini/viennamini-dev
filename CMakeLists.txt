PROJECT(ViennaMini)

include(ExternalProject)

# CMake 2.8.2 is required as a minimum due to the 
# ExternalProject_Add mechanism supporting GIT repositories
cmake_minimum_required(VERSION 2.8.2)

#if you don't want the full compiler output, remove the following line
SET(CMAKE_VERBOSE_MAKEFILE ON)

OPTION(DOWNLOAD_DEPENDENCIES "Automatically checkout depending GIT repositories" ON)
OPTION(USE_LOCAL_VIENNASTAR "Access locally available ViennaStar libraries via environment paths" OFF)

IF(DOWNLOAD_DEPENDENCIES AND USE_LOCAL_VIENNASTAR)
  MESSAGE(STATUS "Incompatible configuration, using local ViennaStar libraries.")
  SET(${DOWNLOAD_DEPENDENCIES} OFF)
ENDIF(DOWNLOAD_DEPENDENCIES AND USE_LOCAL_VIENNASTAR)

#specify custom boost path if needed:
#SET(BOOSTPATH "/opt/boost")

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

#set default build type 
IF (NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "Release")
ENDIF()

#set compiler flags
SET(CMAKE_CXX_FLAGS "-Wall -pedantic")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O3 -g ")
SET(CMAKE_CXX_FLAGS_RELEASE "-O3 ")
SET(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g ")

# alternate boost path for macs
IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
   INCLUDE_DIRECTORIES("/opt/local/include")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

INCLUDE_DIRECTORIES(".")
IF(USE_LOCAL_VIENNASTAR)
  #INCLUDE_DIRECTORIES($ENV{VIENNAMATH})
  #INCLUDE_DIRECTORIES($ENV{VIENNAGRID})
  #INCLUDE_DIRECTORIES($ENV{VIENNACL})
  #INCLUDE_DIRECTORIES($ENV{VIENNADATA})
  #INCLUDE_DIRECTORIES($ENV{VIENNAFVM})
  #INCLUDE_DIRECTORIES($ENV{VIENNAMATERIALS})
  ##INCLUDE_DIRECTORIES($ENV{VIENNAMESH})
  ##INCLUDE_DIRECTORIES($ENV{VIENNAMESH}/external)
ENDIF(USE_LOCAL_VIENNASTAR)

IF(DOWNLOAD_DEPENDENCIES)
  FIND_PACKAGE(Git REQUIRED)
  IF(GIT_FOUND)
    INCLUDE(cmake/GetViennaMaterials.cmake)
    INCLUDE(cmake/GetViennaGrid.cmake)
  ENDIF(GIT_FOUND)
ENDIF(DOWNLOAD_DEPENDENCIES)

#specify include and source directory
#INCLUDE_DIRECTORIES(".")
#INCLUDE_DIRECTORIES(${BOOSTPATH})
#INCLUDE_DIRECTORIES($ENV{VIENNAMATH})
#INCLUDE_DIRECTORIES($ENV{VIENNAGRID})
#INCLUDE_DIRECTORIES($ENV{VIENNACL})
#INCLUDE_DIRECTORIES($ENV{VIENNADATA})
#INCLUDE_DIRECTORIES($ENV{VIENNAFVM})
#INCLUDE_DIRECTORIES($ENV{VIENNAMATERIALS})
##INCLUDE_DIRECTORIES($ENV{VIENNAMESH})
##INCLUDE_DIRECTORIES($ENV{VIENNAMESH}/external)

#IF(ENABLE_OPENCL)
#  FIND_PACKAGE(OpenCL REQUIRED)
#  IF(OPENCL_FOUND)
#    INCLUDE_DIRECTORIES(${OPENCL_INCLUDE_DIRS})
#    SET(LIBRARIES ${LIBRARIES} ${OPENCL_LIBRARIES})
#    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -DVIENNACL_WITH_OPENCL")
#  ENDIF(OPENCL_FOUND)
#ENDIF(ENABLE_OPENCL)

#IF(ENABLE_OPENMP)
#  FIND_PACKAGE(OpenMP REQUIRED)
#  IF(OPENMP_FOUND)
#    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS} -DVIENNACL_WITH_OPENMP")
#    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -DVIENNACL_WITH_OPENMP")
#  ENDIF(OPENMP_FOUND)
#ENDIF(ENABLE_OPENMP)



#set(VIENNAMESH_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/viennamesh")
#set(VIENNAMESH_INSTALL_DIR "${CMAKE_CURRENT_BINARY_DIR}/viennamesh")
#set(VIENNAMESH_CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${VIENNAMESH_INSTALL_DIR} -DBUILD_EXAMPLES=OFF -DBUILD_TOOLS=OFF -DBUILD_TESTING=OFF -DBUILD_DOXYGEN_DOCS=OFF  -DBUILD_MANUAL=OFF -DENABLE_DIST=OFF)

#message(STATUS "ViennaMesh_PREFIX='${VIENNAMESH_PREFIX}'")
#message(STATUS "ViennaMesh_INSTALL_DIR='${VIENNAMESH_INSTALL_DIR}'")
#message(STATUS "ViennaMesh_CMAKE_ARGS='${VIENNAMESH_CMAKE_ARGS}'")
##message("GIT_EXECUTABLE='${GIT_EXECUTABLE}'")

#ExternalProject_Add(viennamesh
#  PREFIX ${VIENNAMESH_PREFIX}
#  GIT_REPOSITORY https://github.com/viennamesh/viennamesh-dev.git
#  INSTALL_DIR ${VIENNAMESH_INSTALL_DIR}
#  CMAKE_ARGS ${VIENNAMESH_CMAKE_ARGS}
#)
#link_directories( ${PROJECT_BINARY_DIR}/netgen-prefix/lib )


# build the ViennaMini library
#AUX_SOURCE_DIRECTORY(src/ LIBSOURCES) 
#ADD_LIBRARY(viennamini SHARED ${LIBSOURCES})
#SET(LIBRARIES ${LIBRARIES} viennamini)

##list all source files here
#ADD_EXECUTABLE(mosfet     examples/mosfet.cpp)
#TARGET_LINK_LIBRARIES(mosfet ${LIBRARIES})

#ADD_EXECUTABLE(trigate     examples/trigate.cpp)
#TARGET_LINK_LIBRARIES(trigate ${LIBRARIES})

#ADD_EXECUTABLE(nin2d     examples/nin2d.cpp)
#TARGET_LINK_LIBRARIES(nin2d ${LIBRARIES})

#ADD_LIBRARY(triangle $ENV{VIENNAMESH}/external/triangle/triangle.c)
#SET_TARGET_PROPERTIES(triangle PROPERTIES COMPILE_FLAGS "-DTRILIBRARY -DANSI_DECLARATORS")
#ADD_EXECUTABLE(device_generator     examples/device_generator.cpp)
#TARGET_LINK_LIBRARIES(device_generator triangle ${LIBRARIES})


##Compatibility with Qt-Creator
file( GLOB_RECURSE QtCreatorCompatibility_SRC
    viennamini/*.hpp viennamini/*.h)
add_custom_target( QtCreatorCompatibility SOURCES ${QtCreatorCompatibility_SRC} )



