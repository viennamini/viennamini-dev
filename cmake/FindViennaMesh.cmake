# - Find ViennaMesh
#
# Defines the following if found:
#   VIENNAMESH_FOUND          : TRUE if found, FALSE otherwise
#   VIENNAMESH_INCLUDE_DIRS   : Include directories 
#   VIENNAMESH_LIBRARIES      : The libraries 
#
# Module looks for the path provided by the environment variable
#   VIENNAMESHPATH


FIND_PATH(VIENNAMESH_DIR 
          NAMES viennamesh/forwards.hpp
          PATHS $ENV{VIENNAMESHPATH}
          )

SET(VIENNAMESH_INCLUDE_DIRS ${VIENNAMESH_DIR} ${VIENNAMESH_DIR}/external)

find_package_handle_standard_args(ViennaMesh DEFAULT_MSG VIENNAMESH_DIR)

mark_as_advanced(VIENNAMESH_DIR)


## 
SET(VIENNAMESH_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/viennamesh")
SET(VIENNAMESH_INSTALL_DIR "${CMAKE_CURRENT_BINARY_DIR}/viennamesh/install")
SET(VIENNAMESH_CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${VIENNAMESH_INSTALL_DIR} -DBUILD_SHARED_LIBS=ON
    -DBUILD_DOXYGEN_DOCS=OFF -DBUILD_MANUAL=OFF -DENABLE_DIST=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TOOLS=OFF -DBUILD_TESTING=OFF
    -DBUILD_EXTERNAL_LIB_TRIANGLE=ON -DBUILD_EXTERNAL_LIB_TETGEN=ON -DBUILD_EXTERNAL_LIB_NETGEN=OFF -DBUILD_EXTERNAL_LIB_VGMODELER=OFF)

ExternalProject_Add(viennamesh
  PREFIX ${VIENNAMESH_PREFIX}
  SOURCE_DIR ${VIENNAMESH_DIR}
  CMAKE_ARGS ${VIENNAMESH_CMAKE_ARGS}
  INSTALL_COMMAND ""
)

SET(VIENNAMESH_TRIANGLE ${CMAKE_CURRENT_BINARY_DIR}/viennamesh/src/viennamesh-build/external/triangle/libtriangle.so)
SET(VIENNAMESH_TETGEN ${CMAKE_CURRENT_BINARY_DIR}/viennamesh/src/viennamesh-build/external/tetgen/libtetgen.so)

SET(VIENNAMESH_LIBRARIES ${VIENNAMESH_TRIANGLE} ${VIENNAMESH_TETGEN})



